// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
let selectedFiles = [];
let decryptedFiles = [];

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 * @param {number} bytes - —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
 * @returns {string} - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
 */
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 */
document.getElementById('file-upload').addEventListener('change', function(e) {
    selectedFiles = Array.from(e.target.files);
    const fileList = document.getElementById('file-list');
    const fileInfo = document.getElementById('file-info');
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    fileList.innerHTML = '';
    
    if (selectedFiles.length > 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ
        selectedFiles.forEach(file => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = `
                <div class="file-name">${file.name}</div>
                <div class="file-size">${formatFileSize(file.size)}</div>
            `;
            fileList.appendChild(fileItem);
        });
        fileInfo.style.display = 'block';
    } else {
        fileInfo.style.display = 'none';
    }
});

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∏—Ö
 */
async function decryptFiles() {
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const fileInput = document.getElementById('file-upload');
    const passwordInput = document.getElementById('password');
    const statusDiv = document.getElementById('status');
    const downloadSection = document.getElementById('download-section');
    const downloadLinks = document.getElementById('download-links');
    const downloadAllBtn = document.getElementById('downloadAll');
    const loader = document.getElementById('loader');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    statusDiv.textContent = '';
    statusDiv.className = 'status-message';
    downloadLinks.innerHTML = '';
    downloadAllBtn.style.display = 'none';
    loader.style.display = 'none';
    decryptedFiles = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ —Ñ–∞–π–ª—ã
    if (!fileInput.files.length) {
        statusDiv.textContent = '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã.';
        statusDiv.className = 'status-message error';
        statusDiv.style.display = 'block';
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const password = passwordInput.value || 'default_password';
    statusDiv.textContent = 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...';
    statusDiv.className = 'status-message';
    statusDiv.style.display = 'block';
    loader.style.display = 'flex';

    try {
        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        const key = await generateDecryptionKey(password);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for (const file of selectedFiles) {
            await processFile(file, key, statusDiv, downloadLinks);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å –≤—Å–µ", –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if (decryptedFiles.length > 0) {
            downloadAllBtn.style.display = 'inline-block';
            statusDiv.textContent += `\nüíæ –í—Å–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!`;
        } else {
            statusDiv.textContent += `\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª.`;
        }

    } catch (e) {
        statusDiv.textContent = `‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${e.message}`;
        statusDiv.className = 'status-message error';
    } finally {
        loader.style.display = 'none';
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏–∑ –ø–∞—Ä–æ–ª—è
 * @param {string} password - –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
 * @returns {Promise<CryptoKey>} - –∫–ª—é—á –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
 */
async function generateDecryptionKey(password) {
    const encoder = new TextEncoder();
    const passwordBuffer = encoder.encode(password);
    const keyMaterial = await crypto.subtle.digest('SHA-256', passwordBuffer);
    
    return await crypto.subtle.importKey(
        'raw',
        keyMaterial,
        { name: 'AES-CTR' },
        false,
        ['decrypt']
    );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
 * @param {File} file - —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param {CryptoKey} key - –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
 * @param {HTMLElement} statusDiv - —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
 * @param {HTMLElement} downloadLinks - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Å—ã–ª–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
 */
async function processFile(file, key, statusDiv, downloadLinks) {
    try {
        // –ß–∏—Ç–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const encryptedData = await file.arrayBuffer();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å IV)
        if (encryptedData.byteLength < 16) {
            statusDiv.textContent += `\n‚ùå –§–∞–π–ª ${file.name} —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π.`;
            statusDiv.className = 'status-message error';
            return;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 16 –±–∞–π—Ç)
        const iv = encryptedData.slice(0, 16);
        const encryptedContent = encryptedData.slice(16);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if (encryptedContent.byteLength === 0) {
            statusDiv.textContent += `\n‚ùå –ù–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ ${file.name}.`;
            statusDiv.className = 'status-message error';
            return;
        }

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
        const decryptedData = await crypto.subtle.decrypt(
            {
                name: 'AES-CTR',
                counter: iv,
                length: 128
            },
            key,
            encryptedContent
        );

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
        const fileInfo = detectFileType(new Uint8Array(decryptedData.slice(0, 4)));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (fileInfo.type !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π') {
            statusDiv.textContent += `\n‚úÖ ${file.name}: –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ ${fileInfo.type}!`;
            statusDiv.className = 'status-message success';
        } else {
            statusDiv.textContent += `\n‚ö†Ô∏è ${file.name}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.`;
            statusDiv.className = 'status-message error';
        }

        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        createDownloadLink(file, decryptedData, fileInfo, downloadLinks);

        statusDiv.textContent += `\nüíæ ${file.name}: –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!`;

    } catch (e) {
        statusDiv.textContent += `\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${file.name}: ${e.message}`;
        statusDiv.className = 'status-message error';
    }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ –µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
 * @param {Uint8Array} header - –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞
 * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–µ —Ñ–∞–π–ª–∞
 */
function detectFileType(header) {
    // –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ñ–∞–π–ª–æ–≤
    const validHeaders = [
        { bytes: [0xFF, 0xD8], ext: 'jpg', type: 'JPEG' },
        { bytes: [0x89, 0x50, 0x4E, 0x47], ext: 'png', type: 'PNG' },
        { bytes: [0x42, 0x4D], ext: 'bmp', type: 'BMP' },
        { bytes: [0x52, 0x49, 0x46, 0x46], ext: 'webp', type: 'WEBP' },
        { bytes: [0x47, 0x49, 0x46, 0x38], ext: 'gif', type: 'GIF' }
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    for (const { bytes, ext, type } of validHeaders) {
        if (header.slice(0, bytes.length).every((b, i) => b === bytes[i])) {
            return { ext, type };
        }
    }

    // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    return { ext: 'bin', type: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π' };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 * @param {File} originalFile - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
 * @param {ArrayBuffer} decryptedData - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @param {Object} fileInfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ —Ñ–∞–π–ª–∞
 * @param {HTMLElement} downloadLinks - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Å—ã–ª–æ–∫
 */
function createDownloadLink(originalFile, decryptedData, fileInfo, downloadLinks) {
    // –°–æ–∑–¥–∞–µ–º Blob —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const blob = new Blob([decryptedData], { type: `image/${fileInfo.ext}` });
    const url = URL.createObjectURL(blob);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const originalName = originalFile.name.replace(/\.[^/.]+$/, "");
    const fileName = `${originalName}_decrypted.${fileInfo.ext}`;
    
    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const downloadLink = document.createElement('a');
    downloadLink.href = url;
    downloadLink.download = fileName;
    downloadLink.className = 'download-btn';
    downloadLink.textContent = `–°–∫–∞—á–∞—Ç—å ${originalFile.name} (${fileInfo.type})`;
    downloadLinks.appendChild(downloadLink);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    decryptedFiles.push({ url, name: fileName });
}

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
 */
function downloadAllFiles() {
    decryptedFiles.forEach(file => {
        const link = document.createElement('a');
        link.href = file.url;
        link.download = file.name;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    });
}
