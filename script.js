// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
let selectedFiles = [];
let decryptedFiles = [];

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 * @param {number} bytes - —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
 * @returns {string} - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
 */
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ –µ–≥–æ —Ç–∏–ø—É
 * @param {string} fileName - –∏–º—è —Ñ–∞–π–ª–∞
 * @returns {string} - —ç–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞
 */
function getFileIcon(fileName) {
    const extension = fileName.split('.').pop()?.toLowerCase();
    const iconMap = {
        'jpg': 'üñºÔ∏è', 'jpeg': 'üñºÔ∏è', 'png': 'üñºÔ∏è', 'gif': 'üñºÔ∏è', 'bmp': 'üñºÔ∏è', 'webp': 'üñºÔ∏è',
        'pdf': 'üìÑ', 'doc': 'üìÑ', 'docx': 'üìÑ', 'txt': 'üìÑ',
        'zip': 'üì¶', 'rar': 'üì¶', '7z': 'üì¶',
        'mp4': 'üé•', 'avi': 'üé•', 'mov': 'üé•',
        'mp3': 'üéµ', 'wav': 'üéµ', 'flac': 'üéµ'
    };
    return iconMap[extension] || 'üìÅ';
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ñ–∞–π–ª–∞
 * @param {File} file - —Ñ–∞–π–ª
 * @returns {string} - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
 */
function generateFileId(file) {
    return `${file.name}_${file.size}_${file.lastModified}`;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ñ–∞–π–ª–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 * @param {File} file - —Ñ–∞–π–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {HTMLElement} - —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–∞
 */
function createFileCard(file) {
    const fileId = generateFileId(file);
    const fileCard = document.createElement('div');
    fileCard.className = 'file-card';
    fileCard.dataset.fileId = fileId;
    
    fileCard.innerHTML = `
        <div class="file-card-header">
            <div style="display: flex; align-items: flex-start;">
                <div class="file-icon">${getFileIcon(file.name)}</div>
                <div class="file-info">
                    <div class="file-name" title="${file.name}">${file.name}</div>
                    <div class="file-size">${formatFileSize(file.size)}</div>
                </div>
            </div>
            <button class="file-remove" onclick="removeFile('${fileId}')" title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª">√ó</button>
        </div>
        <div class="file-status ready">–ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ</div>
        <div class="file-progress" id="progress_${fileId}">
            <div class="file-progress-bar"></div>
        </div>
    `;
    
    return fileCard;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 */
function updateFilesDisplay() {
    const filesGrid = document.getElementById('files-grid');
    const filesCounter = document.querySelector('.files-counter');
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É —Ñ–∞–π–ª–æ–≤
    filesGrid.innerHTML = '';
    
    if (selectedFiles.length === 0) {
        filesCounter?.classList.remove('show');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    selectedFiles.forEach(file => {
        const fileCard = createFileCard(file);
        filesGrid.appendChild(fileCard);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
    if (!filesCounter) {
        createFilesCounter();
    } else {
        updateFilesCounter();
        filesCounter.classList.add('show');
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
 */
function createFilesCounter() {
    const filesGrid = document.getElementById('files-grid');
    const counter = document.createElement('div');
    counter.className = 'files-counter show';
    counter.innerHTML = `
        <span class="files-counter-text">–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${selectedFiles.length}</span>
        <button class="clear-all-btn" onclick="clearAllFiles()">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ</button>
    `;
    filesGrid.parentNode.insertBefore(counter, filesGrid);
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
 */
function updateFilesCounter() {
    const counterText = document.querySelector('.files-counter-text');
    if (counterText) {
        counterText.textContent = `–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${selectedFiles.length}`;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞
 * @param {string} fileId - ID —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 */
function removeFile(fileId) {
    const fileCard = document.querySelector(`[data-file-id="${fileId}"]`);
    if (fileCard) {
        fileCard.classList.add('removing');
        setTimeout(() => {
            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ –º–∞—Å—Å–∏–≤–∞
            selectedFiles = selectedFiles.filter(file => generateFileId(file) !== fileId);
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            updateFilesDisplay();
        }, 300);
    }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
 */
function clearAllFiles() {
    selectedFiles = [];
    decryptedFiles = [];
    updateFilesDisplay();
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ñ–∞–π–ª–æ–≤
    document.getElementById('file-upload').value = '';
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const statusDiv = document.getElementById('status');
    const downloadSection = document.getElementById('download-section');
    statusDiv.style.display = 'none';
    document.getElementById('downloadAll').style.display = 'none';
    document.getElementById('download-links').innerHTML = '';
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫ (–∏–∑–±–µ–≥–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
 * @param {FileList|File[]} files - —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
 */
function addFiles(files) {
    const newFiles = Array.from(files);
    
    newFiles.forEach(newFile => {
        const newFileId = generateFileId(newFile);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞
        const exists = selectedFiles.some(existingFile => 
            generateFileId(existingFile) === newFileId
        );
        
        if (!exists) {
            selectedFiles.push(newFile);
        }
    });
    
    updateFilesDisplay();
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag & drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */
function initializeDragAndDrop() {
    const dropZone = document.getElementById('drop-zone');
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
    });
    
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
    ['dragenter', 'dragover'].forEach(eventName => {
        dropZone.addEventListener(eventName, highlight, false);
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, unhighlight, false);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∞–π–ª–æ–≤
    dropZone.addEventListener('drop', handleDrop, false);
    
    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    
    function highlight(e) {
        dropZone.classList.add('drag-over');
    }
    
    function unhighlight(e) {
        dropZone.classList.remove('drag-over');
    }
    
    function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        addFiles(files);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
 */
document.getElementById('file-upload').addEventListener('change', function(e) {
    addFiles(e.target.files);
});

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
 * @param {string} fileId - ID —Ñ–∞–π–ª–∞
 * @param {string} status - –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å ('ready', 'processing', 'success', 'error')
 * @param {string} message - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
 */
function updateFileStatus(fileId, status, message = '') {
    const fileCard = document.querySelector(`[data-file-id="${fileId}"]`);
    if (!fileCard) return;
    
    const statusElement = fileCard.querySelector('.file-status');
    const progressElement = fileCard.querySelector('.file-progress');
    
    statusElement.className = `file-status ${status}`;
    
    const statusMessages = {
        'ready': '–ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'processing': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...',
        'success': message || '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω',
        'error': message || '–û—à–∏–±–∫–∞'
    };
    
    statusElement.textContent = statusMessages[status] || message;
    
    if (status === 'processing') {
        progressElement.classList.add('show');
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progressBar = progressElement.querySelector('.file-progress-bar');
        progressBar.style.width = '100%';
    } else {
        progressElement.classList.remove('show');
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∏—Ö
 */
async function decryptFiles() {
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const passwordInput = document.getElementById('password');
    const statusDiv = document.getElementById('status');
    const downloadSection = document.getElementById('download-section');
    const downloadLinks = document.getElementById('download-links');
    const downloadAllBtn = document.getElementById('downloadAll');
    const loader = document.getElementById('loader');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    statusDiv.textContent = '';
    statusDiv.className = 'status-message';
    downloadLinks.innerHTML = '';
    downloadAllBtn.style.display = 'none';
    loader.style.display = 'none';
    decryptedFiles = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ —Ñ–∞–π–ª—ã
    if (selectedFiles.length === 0) {
        statusDiv.textContent = '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.';
        statusDiv.className = 'status-message error';
        statusDiv.style.display = 'block';
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const password = passwordInput.value || 'default_password';
    statusDiv.textContent = `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${selectedFiles.length} —Ñ–∞–π–ª–æ–≤...`;
    statusDiv.className = 'status-message';
    statusDiv.style.display = 'block';
    loader.style.display = 'flex';

    try {
        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        const key = await generateDecryptionKey(password);

        let successCount = 0;
        let errorCount = 0;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for (const file of selectedFiles) {
            const fileId = generateFileId(file);
            updateFileStatus(fileId, 'processing');
            
            try {
                const result = await processFile(file, key, downloadLinks);
                if (result.success) {
                    updateFileStatus(fileId, 'success', `${result.fileType} —Ñ–∞–π–ª`);
                    successCount++;
                } else {
                    updateFileStatus(fileId, 'error', result.error);
                    errorCount++;
                }
            } catch (error) {
                updateFileStatus(fileId, 'error', error.message);
                errorCount++;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if (successCount > 0) {
            statusDiv.textContent = `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount} —Ñ–∞–π–ª–æ–≤`;
            if (errorCount > 0) {
                statusDiv.textContent += `\n‚ö†Ô∏è –û—à–∏–±–æ–∫: ${errorCount} —Ñ–∞–π–ª–æ–≤`;
            }
            statusDiv.className = 'status-message success';
            downloadAllBtn.style.display = 'inline-block';
        } else {
            statusDiv.textContent = `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å.`;
            statusDiv.className = 'status-message error';
        }

    } catch (e) {
        statusDiv.textContent = `‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${e.message}`;
        statusDiv.className = 'status-message error';
        
        // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫–∞–∫ –æ—à–∏–±–æ—á–Ω—ã–µ
        selectedFiles.forEach(file => {
            const fileId = generateFileId(file);
            updateFileStatus(fileId, 'error', '–û—à–∏–±–∫–∞ –∫–ª—é—á–∞');
        });
    } finally {
        loader.style.display = 'none';
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏–∑ –ø–∞—Ä–æ–ª—è
 * @param {string} password - –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
 * @returns {Promise<CryptoKey>} - –∫–ª—é—á –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
 */
async function generateDecryptionKey(password) {
    const encoder = new TextEncoder();
    const passwordBuffer = encoder.encode(password);
    const keyMaterial = await crypto.subtle.digest('SHA-256', passwordBuffer);
    
    return await crypto.subtle.importKey(
        'raw',
        keyMaterial,
        { name: 'AES-CTR' },
        false,
        ['decrypt']
    );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
 * @param {File} file - —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param {CryptoKey} key - –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
 * @param {HTMLElement} downloadLinks - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Å—ã–ª–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
 * @returns {Promise<Object>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function processFile(file, key, downloadLinks) {
    try {
        // –ß–∏—Ç–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const encryptedData = await file.arrayBuffer();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å IV)
        if (encryptedData.byteLength < 16) {
            return { success: false, error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª' };
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 16 –±–∞–π—Ç)
        const iv = encryptedData.slice(0, 16);
        const encryptedContent = encryptedData.slice(16);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if (encryptedContent.byteLength === 0) {
            return { success: false, error: '–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª' };
        }

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
        const decryptedData = await crypto.subtle.decrypt(
            {
                name: 'AES-CTR',
                counter: iv,
                length: 128
            },
            key,
            encryptedContent
        );

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
        const fileInfo = detectFileType(new Uint8Array(decryptedData.slice(0, 4)));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if (fileInfo.type === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π') {
            return { success: false, error: '–ù–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' };
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        createDownloadLink(file, decryptedData, fileInfo, downloadLinks);

        return { 
            success: true, 
            fileType: fileInfo.type,
            extension: fileInfo.ext
        };

    } catch (e) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (e.name === 'OperationError') {
            return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' };
        }
        return { success: false, error: '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª' };
    }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ –µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
 * @param {Uint8Array} header - –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞
 * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–µ —Ñ–∞–π–ª–∞
 */
function detectFileType(header) {
    // –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ñ–∞–π–ª–æ–≤
    const validHeaders = [
        { bytes: [0xFF, 0xD8], ext: 'jpg', type: 'JPEG' },
        { bytes: [0x89, 0x50, 0x4E, 0x47], ext: 'png', type: 'PNG' },
        { bytes: [0x42, 0x4D], ext: 'bmp', type: 'BMP' },
        { bytes: [0x52, 0x49, 0x46, 0x46], ext: 'webp', type: 'WEBP' },
        { bytes: [0x47, 0x49, 0x46, 0x38], ext: 'gif', type: 'GIF' }
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    for (const { bytes, ext, type } of validHeaders) {
        if (header.slice(0, bytes.length).every((b, i) => b === bytes[i])) {
            return { ext, type };
        }
    }

    // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    return { ext: 'bin', type: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π' };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 * @param {File} originalFile - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
 * @param {ArrayBuffer} decryptedData - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @param {Object} fileInfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ —Ñ–∞–π–ª–∞
 * @param {HTMLElement} downloadLinks - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Å—ã–ª–æ–∫
 */
function createDownloadLink(originalFile, decryptedData, fileInfo, downloadLinks) {
    // –°–æ–∑–¥–∞–µ–º Blob —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const blob = new Blob([decryptedData], { type: `image/${fileInfo.ext}` });
    const url = URL.createObjectURL(blob);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const originalName = originalFile.name.replace(/\.[^/.]+$/, "");
    const fileName = `${originalName}_decrypted.${fileInfo.ext}`;
    
    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const downloadLink = document.createElement('a');
    downloadLink.href = url;
    downloadLink.download = fileName;
    downloadLink.className = 'download-btn';
    downloadLink.textContent = `üì• ${originalFile.name} (${fileInfo.type})`;
    downloadLinks.appendChild(downloadLink);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    decryptedFiles.push({ url, name: fileName });
}

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
 */
function downloadAllFiles() {
    decryptedFiles.forEach((file, index) => {
        setTimeout(() => {
            const link = document.createElement('a');
            link.href = file.url;
            link.download = file.name;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }, index * 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeDragAndDrop();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∑–æ–Ω—É –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    const dropZone = document.getElementById('drop-zone');
    dropZone.addEventListener('click', function() {
        document.getElementById('file-upload').click();
    });
});
