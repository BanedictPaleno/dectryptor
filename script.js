// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
let selectedFiles = [];
let decryptedFiles = [];
let extractedLinks = [];

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 * @param {number} bytes - —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
 * @returns {string} - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
 */
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ –µ–≥–æ —Ç–∏–ø—É
 * @param {string} fileName - –∏–º—è —Ñ–∞–π–ª–∞
 * @returns {string} - —ç–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞
 */
function getFileIcon(fileName) {
    const extension = fileName.split('.').pop()?.toLowerCase();
    const iconMap = {
        'jpg': 'üñºÔ∏è', 'jpeg': 'üñºÔ∏è', 'png': 'üñºÔ∏è', 'gif': 'üñºÔ∏è', 'bmp': 'üñºÔ∏è', 'webp': 'üñºÔ∏è',
        'pdf': 'üìÑ', 'doc': 'üìÑ', 'docx': 'üìÑ', 'txt': 'üìÑ',
        'zip': 'üì¶', 'rar': 'üì¶', '7z': 'üì¶',
        'mp4': 'üé•', 'avi': 'üé•', 'mov': 'üé•',
        'mp3': 'üéµ', 'wav': 'üéµ', 'flac': 'üéµ'
    };
    return iconMap[extension] || 'üìÅ';
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ñ–∞–π–ª–∞
 * @param {File} file - —Ñ–∞–π–ª
 * @returns {string} - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
 */
function generateFileId(file) {
    return `${file.name}_${file.size}_${file.lastModified}`;
}

/**
 * –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã –∏ —Å—Å—ã–ª–∫–∏
 * @param {string} filename - –∏–º—è —Ñ–∞–π–ª–∞
 * @param {string} password - –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
 * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –¥–∞—Ç–æ–π –∏ —Å—Å—ã–ª–∫–æ–π
 */
function decryptFilename(filename, password) {
    try {
        // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        const baseName = filename.replace(/\.[^/.]+$/, "");
        
        try {
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ base64
            const encryptedData = atob(baseName);
            
            // XOR —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
            const passwordBytes = new TextEncoder().encode(password || 'default_password');
            const decryptedBytes = new Uint8Array(encryptedData.length);
            
            for (let i = 0; i < encryptedData.length; i++) {
                decryptedBytes[i] = encryptedData.charCodeAt(i) ^ passwordBytes[i % passwordBytes.length];
            }
            
            const decryptedString = new TextDecoder().decode(decryptedBytes);
            
            // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é |
            if (decryptedString.includes('|')) {
                const [dateTime, link] = decryptedString.split('|', 2);
                return {
                    dateTime: dateTime,
                    link: link !== 'null' ? link : null,
                    success: true
                };
            }
        } catch (decryptError) {
            console.log('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ base64, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –¥–∞—Ç–æ–π:', decryptError.message);
        }

        // –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç YYYYMMDD_HHMMSS_link
        if (baseName.length >= 15 && baseName[8] === '_' && baseName[15] === '_') {
            const datePart = baseName.substring(0, 8);
            const timePart = baseName.substring(9, 15);
            
            if (/^\d{8}$/.test(datePart) && /^\d{6}$/.test(timePart)) {
                const linkPart = baseName.substring(16);
                
                if (linkPart) {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É
                    let restoredLink = linkPart.replace(/_/g, '/');
                    
                    if (!restoredLink.startsWith('http://') && !restoredLink.startsWith('https://')) {
                        restoredLink = 'https://' + restoredLink;
                    }
                    
                    return {
                        dateTime: `${datePart}_${timePart}`,
                        link: restoredLink,
                        success: true
                    };
                } else {
                    return {
                        dateTime: `${datePart}_${timePart}`,
                        link: null,
                        success: true
                    };
                }
            }
        }
        
        return { dateTime: null, link: null, success: false };
        
    } catch (error) {
        console.log('–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:', error);
        return { dateTime: null, link: null, success: false };
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ENC_ –≤ —Ñ–∞–π–ª–µ
 * @param {ArrayBuffer} fileData - –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
 * @returns {boolean} - true –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
 */
function checkEncryptionMarker(fileData) {
    const header = new Uint8Array(fileData.slice(0, 4));
    const marker = [0x45, 0x4E, 0x43, 0x5F]; // "ENC_"
    return header.every((byte, index) => byte === marker[index]);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–∞—Ä–æ–ª—è
 * @param {string} password - –ø–∞—Ä–æ–ª—å
 * @returns {Promise<ArrayBuffer>} - –∫–ª—é—á SHA-256
 */
async function generateKey(password) {
    const encoder = new TextEncoder();
    const data = encoder.encode(password);
    return await crypto.subtle.digest('SHA-256', data);
}

/**
 * –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è AES-CTR
 * @param {ArrayBuffer} encryptedData - –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @param {ArrayBuffer} key - –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Promise<ArrayBuffer>} - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
async function decryptFileData(encryptedData, key) {
    if (encryptedData.byteLength < 20) {
        throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä ENC_
    if (!checkEncryptionMarker(encryptedData)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Ä–∫–µ—Ä —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º IV (16 –±–∞–π—Ç –ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–∞)
    const iv = encryptedData.slice(4, 20);
    const encryptedContent = encryptedData.slice(20);

    if (encryptedContent.byteLength === 0) {
        throw new Error('–ù–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ');
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á
    const cryptoKey = await crypto.subtle.importKey(
        'raw',
        key,
        { name: 'AES-CTR' },
        false,
        ['decrypt']
    );

    // –°–æ–∑–¥–∞–µ–º IV –¥–ª—è AES-CTR
    const ivArray = new Uint8Array(iv);
    const ivPrefix = ivArray.slice(0, 8);
    const ivCounterBytes = ivArray.slice(8, 16);
    
    // –ß–∏—Ç–∞–µ–º counter –∫–∞–∫ big-endian 64-bit —á–∏—Å–ª–æ
    let counterValue = 0;
    for (let i = 0; i < 8; i++) {
        counterValue = (counterValue * 256) + ivCounterBytes[i];
    }

    // –°–æ–∑–¥–∞–µ–º 128-–±–∏—Ç–Ω—ã–π IV –¥–ª—è AES-CTR
    const fullIV = new Uint8Array(16);
    fullIV.set(ivPrefix, 0);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º counter –∫–∞–∫ big-endian 64-bit —á–∏—Å–ª–æ –≤ –º–ª–∞–¥—à–∏–µ 8 –±–∞–π—Ç
    for (let i = 7; i >= 0; i--) {
        fullIV[8 + i] = counterValue & 0xFF;
        counterValue = Math.floor(counterValue / 256);
    }

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
    const decrypted = await crypto.subtle.decrypt(
        {
            name: 'AES-CTR',
            counter: fullIV,
            length: 128
        },
        cryptoKey,
        encryptedContent
    );

    return decrypted;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
 * @param {ArrayBuffer} data - –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
 * @returns {Object} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ —Ñ–∞–π–ª–∞
 */
function detectFileType(data) {
    const header = new Uint8Array(data.slice(0, 16));
    
    const fileTypes = [
        { signature: [0xFF, 0xD8], ext: 'jpg', mime: 'image/jpeg', type: 'JPEG' },
        { signature: [0x89, 0x50, 0x4E, 0x47], ext: 'png', mime: 'image/png', type: 'PNG' },
        { signature: [0x42, 0x4D], ext: 'bmp', mime: 'image/bmp', type: 'BMP' },
        { signature: [0x52, 0x49, 0x46, 0x46], ext: 'webp', mime: 'image/webp', type: 'WEBP' },
        { signature: [0x47, 0x49, 0x46, 0x38], ext: 'gif', mime: 'image/gif', type: 'GIF' }
    ];

    for (const fileType of fileTypes) {
        if (header.slice(0, fileType.signature.length).every((byte, i) => byte === fileType.signature[i])) {
            return {
                ext: fileType.ext,
                mime: fileType.mime,
                type: fileType.type,
                isValid: true
            };
        }
    }

    return { ext: 'bin', mime: 'application/octet-stream', type: 'Unknown', isValid: false };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ñ–∞–π–ª–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 * @param {File} file - —Ñ–∞–π–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {HTMLElement} - —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–∞
 */
function createFileCard(file) {
    const fileId = generateFileId(file);
    const fileCard = document.createElement('div');
    fileCard.className = 'file-card';
    fileCard.dataset.fileId = fileId;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const password = document.getElementById('password').value || 'default_password';
    const filenameInfo = decryptFilename(file.name, password);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞—Ä–∫–µ—Ä —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (—á–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞)
    const reader = new FileReader();
    reader.onload = function(e) {
        const isEncrypted = checkEncryptionMarker(e.target.result);
        const encryptedIndicator = fileCard.querySelector('.encrypted-indicator');
        if (encryptedIndicator) {
            encryptedIndicator.textContent = isEncrypted ? 'üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω' : 'üìÇ –ù–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω';
            encryptedIndicator.className = `encrypted-indicator ${isEncrypted ? 'yes' : 'no'}`;
        }
    };
    reader.readAsArrayBuffer(file.slice(0, 4));
    
    fileCard.innerHTML = `
        <div class="file-card-header">
            <div style="display: flex; align-items: flex-start;">
                <div class="file-icon">${getFileIcon(file.name)}</div>
                <div class="file-info">
                    <div class="file-name" title="${file.name}">${file.name}</div>
                    <div class="file-size">${formatFileSize(file.size)}</div>
                </div>
            </div>
            <button class="file-remove" onclick="removeFile('${fileId}')" title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª">√ó</button>
        </div>
        
        <div class="file-details">
            ${filenameInfo.dateTime ? `
                <div class="file-detail-item">
                    <span class="file-detail-label">–î–∞—Ç–∞:</span>
                    <span class="file-detail-value">${filenameInfo.dateTime}</span>
                </div>
            ` : ''}
            ${filenameInfo.link ? `
                <div class="file-detail-item">
                    <span class="file-detail-label">–°—Å—ã–ª–∫–∞:</span>
                    <span class="file-detail-value link" onclick="window.open('${filenameInfo.link}', '_blank')" title="–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É">${filenameInfo.link}</span>
                </div>
            ` : ''}
            <div class="encrypted-indicator">–ü—Ä–æ–≤–µ—Ä–∫–∞...</div>
        </div>
        
        <div class="file-status ready">–ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ</div>
        <div class="file-progress" id="progress_${fileId}">
            <div class="file-progress-bar"></div>
        </div>
    `;
    
    return fileCard;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 */
function updateFilesDisplay() {
    const filesGrid = document.getElementById('files-grid');
    const filesCounter = document.querySelector('.files-counter');
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É —Ñ–∞–π–ª–æ–≤
    filesGrid.innerHTML = '';
    
    if (selectedFiles.length === 0) {
        filesCounter?.classList.remove('show');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    selectedFiles.forEach(file => {
        const fileCard = createFileCard(file);
        filesGrid.appendChild(fileCard);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
    if (!filesCounter) {
        createFilesCounter();
    } else {
        updateFilesCounter();
        filesCounter.classList.add('show');
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
 */
function createFilesCounter() {
    const filesGrid = document.getElementById('files-grid');
    const counter = document.createElement('div');
    counter.className = 'files-counter show';
    counter.innerHTML = `
        <span class="files-counter-text">–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${selectedFiles.length}</span>
        <button class="clear-all-btn" onclick="clearAllFiles()">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ</button>
    `;
    filesGrid.parentNode.insertBefore(counter, filesGrid);
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
 */
function updateFilesCounter() {
    const counterText = document.querySelector('.files-counter-text');
    if (counterText) {
        counterText.textContent = `–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${selectedFiles.length}`;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞
 * @param {string} fileId - ID —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 */
function removeFile(fileId) {
    const fileCard = document.querySelector(`[data-file-id="${fileId}"]`);
    if (fileCard) {
        fileCard.classList.add('removing');
        setTimeout(() => {
            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ –º–∞—Å—Å–∏–≤–∞
            selectedFiles = selectedFiles.filter(file => generateFileId(file) !== fileId);
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            updateFilesDisplay();
        }, 300);
    }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
 */
function clearAllFiles() {
    selectedFiles = [];
    decryptedFiles = [];
    extractedLinks = [];
    updateFilesDisplay();
    updateLinksPanel();
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ñ–∞–π–ª–æ–≤
    document.getElementById('file-upload').value = '';
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const statusDiv = document.getElementById('status');
    const downloadSection = document.getElementById('download-section');
    statusDiv.style.display = 'none';
    document.getElementById('downloadAll').style.display = 'none';
    document.getElementById('download-links').innerHTML = '';
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫ (–∏–∑–±–µ–≥–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
 * @param {FileList|File[]} files - —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
 */
function addFiles(files) {
    const newFiles = Array.from(files);
    
    newFiles.forEach(newFile => {
        const newFileId = generateFileId(newFile);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞
        const exists = selectedFiles.some(existingFile => 
            generateFileId(existingFile) === newFileId
        );
        
        if (!exists) {
            selectedFiles.push(newFile);
        }
    });
    
    updateFilesDisplay();
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag & drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */
function initializeDragAndDrop() {
    const dropZone = document.getElementById('drop-zone');
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
    });
    
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
    ['dragenter', 'dragover'].forEach(eventName => {
        dropZone.addEventListener(eventName, highlight, false);
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, unhighlight, false);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∞–π–ª–æ–≤
    dropZone.addEventListener('drop', handleDrop, false);
    
    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    
    function highlight(e) {
        dropZone.classList.add('drag-over');
    }
    
    function unhighlight(e) {
        dropZone.classList.remove('drag-over');
    }
    
    function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        addFiles(files);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
 */
document.getElementById('file-upload').addEventListener('change', function(e) {
    addFiles(e.target.files);
});

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
 * @param {string} fileId - ID —Ñ–∞–π–ª–∞
 * @param {string} status - –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å ('ready', 'processing', 'success', 'error')
 * @param {string} message - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
 */
function updateFileStatus(fileId, status, message = '') {
    const fileCard = document.querySelector(`[data-file-id="${fileId}"]`);
    if (!fileCard) return;
    
    const statusElement = fileCard.querySelector('.file-status');
    const progressElement = fileCard.querySelector('.file-progress');
    
    statusElement.className = `file-status ${status}`;
    
    const statusMessages = {
        'ready': '–ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'processing': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...',
        'success': message || '–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
        'error': message || '–û—à–∏–±–∫–∞'
    };
    
    statusElement.textContent = statusMessages[status] || message;
    
    if (status === 'processing') {
        progressElement.classList.add('show');
        const progressBar = progressElement.querySelector('.file-progress-bar');
        progressBar.style.width = '100%';
    } else {
        progressElement.classList.remove('show');
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å —Å—Å—ã–ª–æ–∫
 */
function updateLinksPanel() {
    const linksPanel = document.getElementById('links-panel');
    const linksContainer = document.getElementById('links-container');
    
    if (extractedLinks.length === 0) {
        linksPanel.style.display = 'none';
        return;
    }
    
    linksContainer.innerHTML = '';
    extractedLinks.forEach((linkInfo, index) => {
        const linkItem = document.createElement('div');
        linkItem.className = 'link-item';
        linkItem.innerHTML = `
            <div class="link-header">
                <div class="link-filename">${linkInfo.filename}</div>
                <div class="link-date">${linkInfo.dateTime || '–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}</div>
            </div>
            <div style="display: flex; align-items: center;">
                <a href="${linkInfo.link}" target="_blank" class="link-url" title="–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É">${linkInfo.link}</a>
                <button class="copy-link-btn" onclick="copyLink('${linkInfo.link}')" title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É">üìã</button>
            </div>
        `;
        linksContainer.appendChild(linkItem);
    });
    
    linksPanel.style.display = 'block';
}

/**
 * –ö–æ–ø–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
 * @param {string} link - —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function copyLink(link) {
    navigator.clipboard.writeText(link).then(() => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.textContent = '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!';
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(76, 175, 80, 0.9);
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            z-index: 10000;
            font-weight: 500;
        `;
        document.body.appendChild(notification);
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 2000);
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
    });
}

/**
 * –ö–æ–ø–∏—Ä—É–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
 */
function copyAllLinks() {
    if (extractedLinks.length === 0) return;
    
    const allLinks = extractedLinks.map(linkInfo => 
        `${linkInfo.filename} (${linkInfo.dateTime || '–ë–µ–∑ –¥–∞—Ç—ã'}): ${linkInfo.link}`
    ).join('\n');
    
    navigator.clipboard.writeText(allLinks).then(() => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.textContent = `–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ${extractedLinks.length} —Å—Å—ã–ª–æ–∫!`;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(33, 150, 243, 0.9);
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            z-index: 10000;
            font-weight: 500;
        `;
        document.body.appendChild(notification);
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 3000);
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª
 * @param {File} file - —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param {ArrayBuffer} key - –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
 * @param {HTMLElement} downloadLinks - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Å—ã–ª–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
 * @returns {Promise<Object>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function processFile(file, key, downloadLinks) {
    try {
        const password = document.getElementById('password').value || 'default_password';
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        const filenameInfo = decryptFilename(file.name, password);
        
        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫
        if (filenameInfo.link) {
            extractedLinks.push({
                filename: file.name,
                dateTime: filenameInfo.dateTime,
                link: filenameInfo.link
            });
        }
        
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        const fileData = await file.arrayBuffer();
        
        let decryptedData;
        let fileType;
        let isEncrypted = false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –ª–∏ —Ñ–∞–π–ª
        if (checkEncryptionMarker(fileData)) {
            isEncrypted = true;
            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
            decryptedData = await decryptFileData(fileData, key);
            fileType = detectFileType(decryptedData);
            
            if (!fileType.isValid) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª');
            }
        } else {
            // –§–∞–π–ª –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω, —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º –∫–∞–∫ –µ—Å—Ç—å
            decryptedData = fileData;
            fileType = detectFileType(decryptedData);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        let outputFileName;
        if (filenameInfo.dateTime) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –∫–∞–∫ –∏–º—è
            outputFileName = `${filenameInfo.dateTime.replace(/[:/\\*?"<>|]/g, '_')}.${fileType.ext}`;
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
            const baseName = file.name.replace(/\.[^/.]+$/, '');
            outputFileName = `${baseName}_decrypted.${fileType.ext}`;
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const blob = new Blob([decryptedData], { type: fileType.mime });
        const url = URL.createObjectURL(blob);
        
        const downloadLink = document.createElement('a');
        downloadLink.href = url;
        downloadLink.download = outputFileName;
        downloadLink.className = 'download-btn';
        downloadLink.textContent = `üì• ${file.name} ‚Üí ${outputFileName}`;
        downloadLinks.appendChild(downloadLink);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        decryptedFiles.push({ url, name: outputFileName });
        
        return {
            success: true,
            fileType: fileType.type,
            isEncrypted: isEncrypted,
            outputFileName: outputFileName
        };
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
        return {
            success: false,
            error: error.message,
            isEncrypted: false
        };
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
 */
async function decryptFiles() {
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const passwordInput = document.getElementById('password');
    const statusDiv = document.getElementById('status');
    const downloadSection = document.getElementById('download-section');
    const downloadLinks = document.getElementById('download-links');
    const downloadAllBtn = document.getElementById('downloadAll');
    const loader = document.getElementById('loader');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    statusDiv.textContent = '';
    statusDiv.className = 'status-message';
    downloadLinks.innerHTML = '';
    downloadAllBtn.style.display = 'none';
    loader.style.display = 'none';
    decryptedFiles = [];
    extractedLinks = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ —Ñ–∞–π–ª—ã
    if (selectedFiles.length === 0) {
        statusDiv.textContent = '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.';
        statusDiv.className = 'status-message error';
        statusDiv.style.display = 'block';
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å
    const password = passwordInput.value || 'default_password';
    statusDiv.textContent = `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${selectedFiles.length} —Ñ–∞–π–ª–æ–≤...`;
    statusDiv.className = 'status-message';
    statusDiv.style.display = 'block';
    loader.style.display = 'flex';

    try {
        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        const key = await generateKey(password);

        let successCount = 0;
        let errorCount = 0;
        let encryptedCount = 0;
        let unencryptedCount = 0;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for (const file of selectedFiles) {
            const fileId = generateFileId(file);
            updateFileStatus(fileId, 'processing');
            
            try {
                const result = await processFile(file, key, downloadLinks);
                if (result.success) {
                    updateFileStatus(fileId, 'success', `${result.fileType} —Ñ–∞–π–ª: ${result.outputFileName}`);
                    successCount++;
                    if (result.isEncrypted) {
                        encryptedCount++;
                    } else {
                        unencryptedCount++;
                    }
                } else {
                    updateFileStatus(fileId, 'error', result.error);
                    errorCount++;
                }
            } catch (error) {
                updateFileStatus(fileId, 'error', error.message);
                errorCount++;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —Å—Å—ã–ª–æ–∫
        updateLinksPanel();

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if (successCount > 0) {
            let statusText = `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount} —Ñ–∞–π–ª–æ–≤`;
            if (encryptedCount > 0) {
                statusText += `\nüîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: ${encryptedCount} —Ñ–∞–π–ª–æ–≤`;
            }
            if (unencryptedCount > 0) {
                statusText += `\nüìÇ –û–±—ã—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${unencryptedCount}`;
            }
            if (extractedLinks.length > 0) {
                statusText += `\nüîó –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Å—ã–ª–æ–∫: ${extractedLinks.length}`;
            }
            if (errorCount > 0) {
                statusText += `\n‚ö†Ô∏è –û—à–∏–±–æ–∫: ${errorCount} —Ñ–∞–π–ª–æ–≤`;
            }
            statusDiv.textContent = statusText;
            statusDiv.className = 'status-message success';
            downloadAllBtn.style.display = 'inline-block';
        } else {
            statusDiv.textContent = `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –∏ —Ñ–∞–π–ª—ã.`;
            statusDiv.className = 'status-message error';
        }

    } catch (e) {
        statusDiv.textContent = `‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${e.message}`;
        statusDiv.className = 'status-message error';
        
        // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫–∞–∫ –æ—à–∏–±–æ—á–Ω—ã–µ
        selectedFiles.forEach(file => {
            const fileId = generateFileId(file);
            updateFileStatus(fileId, 'error', '–û—à–∏–±–∫–∞ –∫–ª—é—á–∞');
        });
    } finally {
        loader.style.display = 'none';
    }
}

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
 */
function downloadAllFiles() {
    decryptedFiles.forEach((file, index) => {
        setTimeout(() => {
            const link = document.createElement('a');
            link.href = file.url;
            link.download = file.name;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }, index * 200); // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeDragAndDrop();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∑–æ–Ω—É –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    const dropZone = document.getElementById('drop-zone');
    dropZone.addEventListener('click', function() {
        document.getElementById('file-upload').click();
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è
    const passwordInput = document.getElementById('password');
    passwordInput.addEventListener('input', function() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è
        if (selectedFiles.length > 0) {
            updateFilesDisplay();
        }
    });
});
